// 동기와 비동기

// 동기
// -> 어러개의 작업을 '순서대로', '하나씩' 처리하는 방식
// -> JavaScript는 기본적으로 "동기"적으로 코드를 실행한다.
// -> 단점 : 중간에 오래 걸리는 작업이 있다면 전체 성능 저하 -> 다른 언어는 멀티 쓰레드로 한 번에 여러 작업 처리 가능하지만 자바스크립트는 싱글 쓰레드

// 비동기
// -> 작업을 순서대로 처리하지 않음

// 동기적 실행
console.log(1);
console.log(3);

// 출력 결과 : 1 2

// 비동기적 실행
// -> setTimeout 함수
console.log(1);

setTimeout(() => {
    console.log(2);
}, 3000);

console.log(3);

// 출력 결과 : 1 3 2

// 싱글 쓰레드인 자바스크립트에서 비동기 작업이 가능한 이유?
// -> 비동기 작업들은 자바스크립트 엔진이 아닌 Web API(브라우저가 직접 관리하는 별도의 공간)에서 실행 됨
// -> 자바스크립트가 코드를 한 줄씩 실행하다가 SetTimeout과 같은 이런 비동기 함수를 만나게 되면 이 비동기 작업을 브라우저의 이 Web APIs에게 실행해 달라고 부탁합니다. 자 그러면서 타이머가 끝나면 실행할 콜백 함수까지 같이 넘겨줘요. 그리고 나서 자바스크립트 엔진은 이 타이머를 기다리지 않고 그 아래에 있는 작업을 즉시 이어서 실행을 합니다. 그리고 나서 이 웹 API's에 있는 이 타이머가 완료가 되면 웹 API's가 전달받았던 이 콜백 함수를 다시 자바스크립트 엔진에게 돌려줍니다. 자 이렇게 자바스크립트 엔진에게 콜백 함수를 돌려주게 되면 자바스크립트 엔진은 그제서야 이렇게 돌려받은 콜백 함수를 실행시킴
